
name: GroupOrder Backend CICD

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]
    types: [opened, synchronize, reopened]

# Not in use
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECS_CLUSTER_NAME: AWS-SWE5001

# env:
#   # Define your public ECR repositories
#   ECR_PUBLIC_REPOSITORIES: |
#     user-service:public.ecr.aws/a5o0l5p8/user-service
#     restaurant-service:public.ecr.aws/a5o0l5p8/restaurant-service
#     service-registry:public.ecr.aws/a5o0l5p8/service-registry
#     api-gateway:public.ecr.aws/a5o0l5p8/api-gateway

jobs:

  update-submodules:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        submodules: true  # Ensures submodules are initialized and updated
        fetch-depth: 0

    - name: Set up Git user
      run: |
        git config --global user.name "NicholasYSX"
        git config --global user.email "e1337517@u.nus.edu"

    - name: Update Submodules
      run: |
        git submodule sync
        git submodule update --init --recursive
        git add .
        git commit -m "Update submodules" || echo "No changes to commit"
        git push origin HEAD:main || echo "Nothing to push"

    - name: Push changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/nus-iss-swe5001-team7/groupOrderOrderPlatform.git HEAD:main || echo "Nothing to push"
  checkstyle_linting:
      needs: update-submodules
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4
  
        - name: Set up JDK 17
          uses: actions/setup-java@v4
          with:
            java-version: '17'
            distribution: 'temurin'
            cache: maven
  
        - name: Build with Maven
          run: mvn -B clean package -DskipTests=false
  
        - name: Run Checkstyle
          run: mvn checkstyle:check
  
        - name: Run Test with Maven
          run: mvn test
  sast_owasp_odc:
      needs: snyk
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4

        - name: Set up JDK 17
          uses: actions/setup-java@v4
          with:
            java-version: '17'
            distribution: 'temurin'
            cache: maven
        - name: OWASP Dependency Check
          run: |
            wget https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.4/dependency-check-10.0.4-release.zip
            unzip dependency-check-10.0.4-release.zip
        - name: Run scan with ODC
          env:
            NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
          run: |
            dependency-check/bin/dependency-check.sh --out . --scan . | tee ODC-report
        - name: Archive production artifacts
          uses: actions/upload-artifact@v4
          with:
            name: sast report
            path: |
              ./ODC-report

  snyk:
    needs: checkstyle_linting
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
           args: --sarif-file-output=results.sarif

  build:
    needs: update-submodules
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v4

      - name: Checkout code with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive  # This ensures submodules are checked out

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

        #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

        #Build the application using Maven
      - name: Upload the maven to dockerhub Container
        run: mvn clean package -P build-docker-image

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      #Working flow commented for temp testing
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # # Added to test for public repo
      # - name: Login to Amazon ECR Public
      #   run: |
      #     aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin public.ecr.aws

      # - name: Process each microservice
      #   run: |
      #     # Convert ECR_PUBLIC_REPOSITORIES to a list of repository URLs
      #     while IFS=":" read -r service repo_url; do
      #       echo "Processing $service"
      #       docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$service
      #       docker tag ${{ secrets.DOCKERHUB_USERNAME }}/$service $repo_url:latest
      #       docker push $repo_url:latest
      #     done <<< "$ECR_PUBLIC_REPOSITORIES"



      # Commented for non-working direct build & push flow
      # - name: Build, Tag, and Push User Service Image
      #   run: |
      #     ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG=${{ github.sha }}
      #     docker build -t $ECR_REGISTRY/user-service:$IMAGE_TAG ./user-service
      #     docker push $ECR_REGISTRY/user-service:$IMAGE_TAG

      # - name: Build, Tag, and Push Restaurant Service Image
      #   run: |
      #     ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG=${{ github.sha }}
      #     docker build -t $ECR_REGISTRY/restaurant-service:$IMAGE_TAG ./restaurant-service
      #     docker push $ECR_REGISTRY/restaurant-service:$IMAGE_TAG

      # - name: Build, Tag, and Push API Gateway Image
      #   run: |
      #     ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG=${{ github.sha }}
      #     docker build -t $ECR_REGISTRY/api-gateway:$IMAGE_TAG ./api-gateway
      #     docker push $ECR_REGISTRY/api-gateway:$IMAGE_TAG

      # - name: Build, Tag, and Push Service Registry Image
      #   run: |
      #     ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG=${{ github.sha }}
      #     docker build -t $ECR_REGISTRY/service-registry:$IMAGE_TAG ./service-registry
      #     docker push $ECR_REGISTRY/service-registry:$IMAGE_TAG

# Working flow, commented for temp testing
      - name: Process each microservice
        run: |
          # Define an array of images
          images=(
            "user-service:latest"
            "restaurant-service:latest"
            "service-registry:latest"
            "api-gateway:latest"
            "order-service:latest"
            "delivery-service:latest"
            "notification:latest"
          )

          # Iterate over each image and process
          for image in "${images[@]}"; do
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$image
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/$image ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/$(echo ${image%%:*} | tr '[:upper:]' '[:lower:]'):${image##*:}
            docker push ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/${image%%:*}:${image##*:}
          done
        
        
           # Use official Zipkin Docker images
          IMAGE_NAME="${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/zipkin:latest"
          
          if ! aws ecr describe-images --repository-name zipkin --image-ids imageTag=latest >/dev/null 2>&1; then
          echo "Zipkin not found in ECR. Pushing the image..."
          docker pull openzipkin/zipkin:latest
          docker tag openzipkin/zipkin:latest "$IMAGE_NAME"
          docker push "$IMAGE_NAME"
          else
          echo "Zipkin already exists in ECR. No need to push."
          fi

# Old deployment steps
#  deploy:
#    #Depends on build's job
#    needs: build
#    name: Deploy
#    #Run on Ubuntu using the latest version
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download JAR
#        #Download the artifact which was uploaded in the build's job
#        uses: actions/download-artifact@v4
#        with:
#          name: artifact
#      #Deploy the artifact (JAR) into AWS Beanstalk
#      - name: Deploy to EB
#        uses: einaregilsson/beanstalk-deploy@v18
#        with:
#          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          use_existing_version_if_available: true
#          application_name: grouporder-backend
#          environment_name: ${{ secrets.AWS_ENVIROMENT_NAME }}
#          version_label: ${{github.SHA}}
#          region: ${{ secrets.AWS_REGION }}
#          deployment_package: groupFoodOrder-0.0.1-SNAPSHOT.jar
#          wait_for_deployment: true
#          wait_for_environment_recovery: 60

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Update ECS services
        run: |
          services=("api-gateway-service" "delivery-service" "user-service" "order-service" "restaurant-service" "notification")
          for service in "${services[@]}"; do
            echo "Updating $service"
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER_NAME }} \
              --service "$service" \
              --force-new-deployment
          done

      - name: Confirm ECS deployment status
        run: |
          services=("api-gateway-service" "delivery-service" "user-service" "order-service" "restaurant-service" "notification")
          for service in "${services[@]}"; do
            echo "Waiting for $service to become stable"
            aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER_NAME }} --services "$service"
          done

  zap_scan:
    needs: deploy
    runs-on: ubuntu-latest
    name: zap scan the web app
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          token: ${{ secrets.GH_TOKEN_ZAP_SCAN}}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: ${{ secrets.BACKEND_WEB_APP_PROD_ADD }}
          cmd_options: '-a'
      - name: Archive staging artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zap report
          path: |
            ./report_html.html
